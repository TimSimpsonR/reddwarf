#!/usr/bin/env python

#    Copyright 2011 OpenStack LLC
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Reddwarf Command line tool
"""

import json
import optparse
import os
import sys


# If ../reddwarf/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'reddwarfclient',
                               '__init__.py')):
    sys.path.insert(0, possible_topdir)
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)


from nova import version
from reddwarfclient import common


oparser = None


def _pretty_print(info):
    print json.dumps(info, sort_keys=True, indent=4)


class ListCommands(object):
    """List details of Instances, Databases, Users, Flavors and Images"""

    def __init__(self):
        pass

    def instances(self):
        """List all Instances for account"""
        dbaas = common.get_client()
        try:
            for instance in dbaas.instances.list():
                _pretty_print(instance._info)
        except:
            print sys.exc_info()[1]

    def instance(self, id):
        """List details for the specified Instance"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.instances.get(id)._info)
        except:
            print sys.exc_info()[1]

    def flavors(self):
        """List the available flavors"""
        dbaas = common.get_client()
        try:
            for flavor in dbaas.flavors.list():
                _pretty_print(flavor._info)
        except:
            print sys.exc_info()[1]

    def images(self):
        """List the available images"""
        dbaas = common.get_client()
        try:
            for image in dbaas.images.list():
                _pretty_print(image._info)
        except:
            print sys.exc_info()[1]

    def users(self, id):
        """List the users on an instance's database"""
        dbaas = common.get_client()
        try:
            for user in dbaas.users.list(id):
                _pretty_print(user._info)
        except:
            print sys.exc_info()[1]

    def databases(self, id):
        """List the databases on an instance"""
        dbaas = common.get_client()
        try:
            for database in dbaas.databases.list(id):
                _pretty_print(database._info)
        except:
            print sys.exc_info()[1]

    def root(self, id):
        """Check the instance for root access"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.root.is_root_enabled(id))
        except:
            print sys.exc_info()[1]


class CreateCommands(object):
    """Create Instances, Databases and Users"""

    def __init__(self):
        pass

    def instance(self, name, volume_size,
                 flavorRef="http://localhost:8775/v1.0/flavors/1"):
        """Create a new instance"""
        dbaas = common.get_client()
        volume = {"size": volume_size}
        try:
            result = dbaas.instances.create(name, flavorRef, volume)
            _pretty_print(result._info)
        except:
            print sys.exc_info()[1]

    def database(self, id, dbname):
        """Create a database within the specified instance"""
        dbaas = common.get_client()
        try:
            databases = [{'name': dbname}]
            dbaas.databases.create(id, databases)
        except:
            print sys.exc_info()[1]

    def user(self, id, username, password, dbname, *args):
        """Create a user in instance, with access to one or more databases"""
        dbaas = common.get_client()
        try:
            databases = [{'name': dbname}]
            [databases.append({"name": db}) for db in args]
            users = [{'name': username, 'password': password,
                     'databases': databases}]
            dbaas.users.create(id, users)
        except:
            print sys.exc_info()[1]

    def root(self, id):
        """Enabling the instance's root user."""
        dbaas = common.get_client()
        try:
            user, password = dbaas.root.create(id)
            print "User:\t\t%s\nPassword:\t%s" % (user, password)
        except:
            print sys.exc_info()[1]


class DeleteCommands(object):
    """Delete Instances, Databases and Users"""

    def __init__(self):
        pass

    def instance(self, id):
        """Delete the specified instance"""
        dbaas = common.get_client()
        try:
            dbaas.instances.delete(id)
        except:
            print sys.exc_info()[1]

    def database(self, id, dbname):
        """Delete the specified database in the instance"""
        dbaas = common.get_client()
        try:
            dbaas.databases.delete(id, dbname)
        except:
            print sys.exc_info()[1]

    def user(self, id, user):
        """Delete the specified user in the instance"""
        dbaas = common.get_client()
        try:
            dbaas.users.delete(id, user)
        except:
            print sys.exc_info()[1]

class MgmtCommands(object):
    """Run various management commands"""

    def __init__(self):
        pass

    def hosts(self):
        """List all Compute hosts"""
        dbaas = common.get_client()
        try:
            for host in dbaas.hosts.index():
                _pretty_print(host._info)
        except:
            print sys.exc_info()[1]

    def host(self, name):
        """List details for the specified Host"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.hosts.get(name)._info)
        except:
            print sys.exc_info()[1]

    def instance(self, id):
        """List details for the specified Instance"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.management.show(id)._info)
        except:
            print sys.exc_info()[1]

    def storage(self):
        """List details for the storage devices"""
        dbaas = common.get_client()
        try:
            for device in dbaas.storage.index():
                _pretty_print(device._info)
        except:
            print sys.exc_info()[1]

    def accounts(self, acct):
        """List details for the account provided"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.accounts.show(acct)._info)
        except:
            print sys.exc_info()[1]

    def root(self, id):
        """List root history for the instance provided"""
        dbaas = common.get_client()
        try:
          _pretty_print(dbaas.management.root_enabled_history(id)._info)
        except:
          print sys.exc_info()[1]

    def upgrade(self, id):
        """Upgrade a single instance."""
        dbaas = common.get_client()
        try:
          _pretty_print(dbaas.guests.upgrade(id)._info)
        except:
          print sys.exc_info()[1]

    def upgradeall(self):
        """Upgrade a single instance."""
        dbaas = common.get_client()
        try:
          _pretty_print(dbaas.guests.upgradeall()._info)
        except:
          print sys.exc_info()[1]


def config_options():
    global oparser
    oparser.add_option("-u", "--url", default="http://localhost:5000/v1.1",
                       help="Auth API endpoint URL with port and version. \
                            Default: http://localhost:5000/v1.1")


COMMANDS = {'auth': common.Auth,
            'list': ListCommands,
            'create': CreateCommands,
            'delete': DeleteCommands,
            'mgmt': MgmtCommands}


def main():
    # Parse arguments
    global oparser
    oparser = optparse.OptionParser("%prog [options] <cmd> <action> <args>",
                                    version=version.version_string)
    config_options()
    (options, args) = oparser.parse_args()

    if not args:
        common.print_commands(COMMANDS)

    # Pop the command and check if it's in the know commands
    cmd = args.pop(0)
    if cmd in COMMANDS:
        fn = COMMANDS.get(cmd)
        command_object = fn()

        # Get a list of supported actions for the command
        actions = common.methods_of(command_object)

        if len(args) < 1:
            common.print_actions(cmd, actions)

        # Check for a valid action and perform that action
        action = args.pop(0)
        if action in actions:
            fn = actions.get(action)

            try:
                fn(*args)
                sys.exit(0)
            except TypeError as err:
                print "Possible wrong number of arguments supplied"
                print "%s %s: %s" % (cmd, action, fn.__doc__)
                print "\t\t", [fn.func_code.co_varnames[i] for i in
                                            range(fn.func_code.co_argcount)]
                print "ERROR: %s" % err
            except Exception:
                print "Command failed, please check log for more info"
                raise
        else:
            common.print_actions(cmd, actions)
    else:
        common.print_commands(COMMANDS)


if __name__ == '__main__':
    main()