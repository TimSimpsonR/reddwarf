#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2011 Openstack, LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
  CLI interface for sending messages to guests directly from compute nodes.
"""

import json
import os
import sys

if __name__=="__main__":
    possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                    os.pardir,
                                                    os.pardir))
    def add_to_path(path):
        if os.path.exists(os.path.join(possible_topdir, path,
                                       '__init__.py')):
            sys.path.insert(0, possible_topdir)
        if os.path.exists(os.path.join(possible_topdir, path, '__init__.py')):
            sys.path.insert(0, possible_topdir)

    add_to_path('nova')
    add_to_path('reddwarf')

    from nova import flags
    FLAGS = flags.FLAGS
    FLAGS(sys.argv)

    from nova import context
    from nova import rpc
    from reddwarf.guest import api

    if len(sys.argv) < 4:
        print("Usage: guest-cli <instance-id> <sync|async> <json object> "
              "<flags ... >")
        print("Example:")
        print("""guest-cli 0ac37461-1c06-4cc6-a919-42bc11384f3f sync """
              """ '{"method":"hi", "args":{}}' """
              """--flagfile=/conf/nova.conf~/nova.conf""")
        print("PS: Don't forget the flags!")
        sys.exit(1)

    guest_api = api.API()
    instance_id = sys.argv[1]
    sync_mode = sys.argv[2]
    json_string = sys.argv[3]

    sync_modes = ["sync", "async"]
    if sync_mode not in sync_modes:
        print("%s is not an option. Use: %s" % (sync_mode, str(sync_modes)))
        sys.exit(1)

    try:
        obj = json.loads(json_string)
    except:
        print("Could not parse JSON. Remember it must be one argument.")
        sys.exit(1)

    print("Sending the following message to guest %s:\n%s"
      % (instance_id, json_string))
    ctxt = context.get_admin_context()
    if sync_mode == "sync":
        result = rpc.call(ctxt, guest_api._get_routing_key(ctxt, instance_id),
                          obj)
        print("Return value:")
        print(result)
    else:
        rpc.cast(ctxt, guest_api._get_routing_key(ctxt, instance_id),
                 obj)
        print("Finished.")