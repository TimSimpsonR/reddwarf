#!/usr/bin/env python

#    Copyright 2011 OpenStack LLC
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Reddwarf Management Command Line Utility
"""

import json
import optparse
import os
import pickle
import sys

# If ../reddwarf/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'reddwarf', '__init__.py')):
    sys.path.insert(0, possible_topdir)
if os.path.exists(os.path.join(possible_topdir, 'reddwarfclient',
                               '__init__.py')):
    sys.path.insert(0, possible_topdir)
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)


from nova import flags
from nova import utils
from nova import version
from nova import log as logging
from reddwarf.db import migration
from reddwarfclient import common


FLAGS = flags.FLAGS
oparser = None
format = "%-25s\t%-25s\t%-30s"
dash = "----------------------------"


def _pretty_print(info):
    print json.dumps(info, sort_keys=True, indent=4)


class DbCommands(object):
    """Commands to manage the datastore"""

    def __init__(self):
        pass

    def sync(self):
        """Sync the database up to the most recent version"""
        print "Current Version = %s" \
                    % migration.db_sync()

    def version(self):
        """Print the current database version"""
        print "Current Version = %s" \
                    % migration.db_version()

    def upgrade(self, version):
        """Upgrade the database to the specified version"""
        print "Current Version = %s" \
                    % migration.db_upgrade(version)

    def downgrade(self, version):
        """Downgrade the database to the specified version"""
        print "Current Version = %s" \
                    % migration.db_downgrade(version)


class ConfigCommands(object):
    """Commands to manage the configuration values"""

    def __init__(self):
        pass

    def create(self, key, value=None, description=None):
        """Create a new configuration entry"""
        dbaas = common.get_client()
        config = {'key': key}
        if value:
            config['value'] = value
        if description:
            config['description'] = description
        try:
            dbaas.configs.create([config])
        except:
            print sys.exc_info()[1]

    def list(self):
        """Print the list of current configuration values"""
        dbaas = common.get_client()
        configs = dbaas.configs.list()
        print format % ("Key", "Value", "Description")
        print format % (dash, dash, dash)
        for config in configs:
            print format % (config.key, config.value, config.description)

    def get(self, config):
        """Get the value for the specified config item"""
        dbaas = common.get_client()
        config = dbaas.configs.get(config)
        print format % ("Key", "Value", "Description")
        print format % (dash, dash, dash)
        print format % (config.key, config.value, config.description)

    def update(self, key, value, description=None):
        """Update the specified configuration value"""
        dbaas = common.get_client()
        config = {'key': key, 'value': value}

        if description:
            config['description'] = description
        try:
            dbaas.configs.update(config)
        except:
            print sys.exc_info()[1]

    def delete(self, config):
        """Delete the specified configuration value"""
        dbaas = common.get_client()
        dbaas.configs.delete(config)


class ImageCommands(object):
    """Commands to list images"""

    def __init__(self):
        pass

    def list(self):
        """List the available images"""
        dbaas = common.get_client()
        try:
            for image in dbaas.images.list():
                _pretty_print(image._info)
        except:
            print sys.exc_info()[1]


class InstanceCommands(object):
    """Commands to perform various instances operations and actions"""

    def __init__(self):
        pass

    def get(self, id):
        """List details for the specified Instance"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.management.show(id)._info)
        except:
            print sys.exc_info()[1]

    def list(self, deleted=None):
        """List all instances, optionally filtered by deleted"""
        dbaas = common.get_client()
        try:
            instances = dbaas.management.index(deleted)
            for instance in instances:
                _pretty_print(instance._info)
        except:
            print sys.exc_info()[1]

    def diagnostics(self, id):
        """List diagnostics for the instance"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.diagnostics.get(id)._info)
        except:
            print sys.exc_info()[1]

    def reboot(self, id):
        """Reboot the OS"""
        dbaas = common.get_client()
        try:
            result = dbaas.management.reboot(id)
            if result:
                print result
        except:
            print sys.exc_info()[1]


class HostCommands(object):
    """Commands to list info on hosts"""

    def __init__(self):
        pass

    def get(self, name):
        """List details for the specified host"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.hosts.get(name)._info)
        except:
            print sys.exc_info()[1]

    def list(self):
        """List all compute hosts"""
        dbaas = common.get_client()
        try:
            for host in dbaas.hosts.index():
                _pretty_print(host._info)
        except:
            print sys.exc_info()[1]


class StorageCommands(object):
    """Commands to list info on storage systems"""

    def __init__(self):
        pass

    def list(self):
        """List details for the storage devices"""
        dbaas = common.get_client()
        try:
            for device in dbaas.storage.index():
                _pretty_print(device._info)
        except:
            print sys.exc_info()[1]


class RootCommands(object):
    """List details about root info for an instance"""

    def __init__(self):
        pass

    def history(self, id):
        """List root history for the instance"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.management.root_enabled_history(id)._info)
        except:
            print sys.exc_info()[1]


class AccountCommands(object):
    """Commands to list account info"""

    def __init__(self):
        pass

    def get(self, acct):
        """List details for the account provided"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.accounts.show(acct)._info)
        except:
            print sys.exc_info()[1]


class UpgradeCommands(object):
    """Commands to upgrade"""

    def all(self):
        """Upgrade all instances"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.guests.upgradeall()._info)
        except:
            print sys.exc_info()[1]

    def instance(self, id):
        """Upgrade a single instance"""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.guests.upgrade(id)._info)
        except:
            print sys.exc_info()[1]

class UpdateCommands(object):
    """Commands to update the guest agent."""

    def instance(self, id):
        """Update the guest agent on a single instance."""
        dbaas = common.get_client()
        try:
            _pretty_print(dbaas.management.update(id)._info)
        except:
            print sys.exc_info()[1]




def config_options(oparser):
    oparser.add_option("-f", "--flagfile", default="/etc/nova/nova.conf",
                        help="Flag file with reddwarf conf")


COMMANDS = {'auth': common.Auth,
            'config': ConfigCommands,
            'db': DbCommands,
            'instance': InstanceCommands,
            'host': HostCommands,
            'image': ImageCommands,
            'storage': StorageCommands,
            'root': RootCommands,
            'account': AccountCommands,
            'upgrade': UpgradeCommands,
            'update': UpdateCommands,
            }


def main():
    utils.default_flagfile()
    FLAGS(sys.argv)
    logging.setup()

    # Parse arguments
    global oparser
    oparser = optparse.OptionParser("%prog [options] <cmd> <action> <args>",
                                    version=version.version_string)
    config_options(oparser)
    (options, args) = oparser.parse_args()

    if not args:
        oparser.print_help()
        common.print_commands(COMMANDS)

    cmd = args.pop(0)
    if cmd in COMMANDS:
        fn = COMMANDS.get(cmd)
        command_object = fn()

        # Get a list of supported actions for the command
        actions = common.methods_of(command_object)

        if len(args) < 1:
            oparser.print_usage()
            common.print_actions(cmd, actions)

        # Check for a valid action and perform that action
        action = args.pop(0)
        if action in actions:
            fn = actions.get(action)

            try:
                fn(*args)
                sys.exit(0)
            except TypeError as err:
                print "Possible wrong number of arguments supplied"
                print "%s %s: %s" % (cmd, action, fn.__doc__)
                print "\t\t", [fn.func_code.co_varnames[i] for i in
                                            range(fn.func_code.co_argcount)]
                print "ERROR: %s" % err
            except Exception:
                print "Command failed, please check log for more info"
                raise
        else:
            oparser.print_help()
            common.print_actions(cmd, actions)
    else:
        oparser.print_usage()
        common.print_commands(COMMANDS)


if __name__ == '__main__':
    main()
